#pragma checksum "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "309028ec2fb3cb6ca432b385be02300bb6624d66"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ApplicationSearch_Index), @"mvc.1.0.view", @"/Views/ApplicationSearch/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\_ViewImports.cshtml"
using FrekvencijeProject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\_ViewImports.cshtml"
using FrekvencijeProject.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"309028ec2fb3cb6ca432b385be02300bb6624d66", @"/Views/ApplicationSearch/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"be0eb2b377f6ff7efb6af5254ff59709e7a66500", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_ApplicationSearch_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<FrekvencijeProject.Models.Ajax.ApplicationView>>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/Palestina.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("width", new global::Microsoft.AspNetCore.Html.HtmlString("80px"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("height", new global::Microsoft.AspNetCore.Html.HtmlString("50px"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("search_by"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("width:150px; font-weight: bold; font-family: Roboto; font-size: 13px; height: 35px"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("from"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("aria-label", new global::Microsoft.AspNetCore.Html.HtmlString("From"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control text-box single-line"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("data-val-maxlength-max", new global::Microsoft.AspNetCore.Html.HtmlString("30"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("width: 30%; height: 35px; font-weight: bold; font-family: Roboto; font-size: 13px; border: solid;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("placeholder", new global::Microsoft.AspNetCore.Html.HtmlString("From"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", "number", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onkeydown", new global::Microsoft.AspNetCore.Html.HtmlString("return  InputAction(event)"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("to"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("aria-label", new global::Microsoft.AspNetCore.Html.HtmlString("To"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("placeholder", new global::Microsoft.AspNetCore.Html.HtmlString("To"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("frequencySize"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("width: 30%; height: 35px; font-weight: bold; font-family: Roboto; font-size: 13px; border-style: solid;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("font-weight: bold; font-family: Roboto; font-size: 13px; height: 35px; width:150px"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("application_first_value"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onchange", new global::Microsoft.AspNetCore.Html.HtmlString("FirstChange()"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("width: 80%; height: 35px; font-weight: bold; font-family: Roboto; font-size: 13px; border-style: solid;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_23 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("application_two_value"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_24 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onchange", new global::Microsoft.AspNetCore.Html.HtmlString("SecondChange()"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_25 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("application_third_value"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_26 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onchange", new global::Microsoft.AspNetCore.Html.HtmlString("ThirdChange()"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_27 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("app_all"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_28 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("width: 80%; height: 35px; font-weight: bold; font-family: Roboto; font-size: 13px; border-style: solid; border-width: 3px; "), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_29 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("font-weight: bold; font-family: Roboto; font-size: 13px; width:150px"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_30 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", new global::Microsoft.AspNetCore.Html.HtmlString("FrequencytableValue"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_31 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("frequency_table"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_32 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("width: 80%; font-weight: bold; font-family: Arial, Helvetica, sans-serif; font-size: 13px; border-style: solid; border-width: 3px;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_33 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("content_container_body"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 4 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
  
    bool showDiv = (Model != null); // Set this value based on your condition

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\r\n<script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\">\r\n</script>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "309028ec2fb3cb6ca432b385be02300bb6624d6617260", async() => {
                WriteLiteral(@"
    <style>
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        /* Firefox */
        input[type=number] {
            -moz-appearance: textfield;
        }
    </style>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
#nullable restore
#line 30 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
 if (Model != null)
{
    

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
     if (Model.Count() > 0)
    {


#line default
#line hidden
#nullable disable
            WriteLiteral("<script type=\"text/javascript\">\r\n     //alert(\'test\');\r\n\r\n    setTimeout(function () {\r\n        //your code here\r\n\r\n        //var value = ;\r\n        //alert(\'ucitao sam:\' + value);\r\n        $(\'#frequencySize\').val(");
#nullable restore
#line 43 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                           Write(Model.ElementAt(0).FrequencySizeValue);

#line default
#line hidden
#nullable disable
            WriteLiteral(").change();\r\n    }, 500);\r\n</script>\r\n");
#nullable restore
#line 46 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 46 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
     
}

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<script type=""text/javascript"">
    var DocString = """";
    function LinkClick() {
        //alert('Does this work?'+e);
        var value = 'ADS    Automatic Dependant Surveillance (Aeronautical)<br/>';
        value += 'AES	    Aircraft Earth Station<br/>';
        value += 'AGA       Air-Ground-Air<br/>';
        value += 'AIS	    Universal Shipborne Automatic Identification System<br/>';
        value += 'ALS	    Assistive Listening Systems<br/>';
        value += 'ALS	    Assistive Listening Systems<br/>';
        value += 'AM	    Amplitude Modulation<br/>';
        value += 'AMRD	    Autonomous Maritime Radio Device<br/>';
        value += 'ALD	    Assistive Listening Devices<br/>';
        value += 'ASDE	    Airport Surface Detection Equipment<br/>';
        value += 'BBDR	    Broad Band Disaster Relief<br/>';
        value += 'BFWA	    Broadband Fixed Wireless Access<br/>';
        value += 'BWA	    Broadband Wireless Access<br/>';
        value += 'CB	    Citizens Band<br/>';
      ");
            WriteLiteral(@"  value += 'CGC	    Complementary Ground Component<br/>';
        value += 'CT	    Cordless Telephone<br/>';
        value += 'DA2GC	    Direct Air-to-Ground Communications<br/>';
        value += 'DECT	    Digital Enhanced Cordless Telecommunications<br/>';
        value += 'D-GPS	    Differential Global Positioning System<br/>';
        value += 'DME	    Distance Measuring Equipment<br/>';
        value += 'DRM	    Digital Radio Mondiale<br/>';
        value += 'DSC	    Digital Selective Calling<br/>';
        value += 'DVB-T	    Digital Video Broadcasting – Terrestrial<br/>';
        value += 'ELT	    Emergency locator transmitter<br/>';
        value += 'ENG/OB	Electronic News Gathering / Outside Broadcasting<br/>';
        value += 'EPIRBs	Emergency Position Indicating Radio Beacons<br/>';
        value += 'ESIM	    Earth Stations In-Motion<br/>';
        value += 'ESOMPs	Earth Stations On Mobile Platforms<br/>';
        value += 'ESV	    Earth Stations on-board Vessels<br/>';
        valu");
            WriteLiteral(@"e += 'FM	    Frequency Modulation<br/>';
        value += 'FRMCS	    Future Railway Mobile Communication System<br/>';
        value += 'FSS	    Fixed-Satellite Service<br/>';
        value += 'FWA	    Fixed Wireless Access<br/>';
        value += 'GBAS	    Ground Based Augmentation System<br/>';
        value += 'GBSAR	    Ground Based Synthetic Aperture Radar<br/>';
        value += 'GLONASS	Globalnaya Navigatsionnaya Sputnikovaya Sistema<br/>';
        value += 'GMDSS	    Global Maritime Distress and Safety System<br/>';
        value += 'GNSS	    Global Navigation Satellite System<br/>';
        value += 'GNSS      Pseudolites	Global Navigation Satellite System Pseudolites<br/>';
        value += 'GPR	    Ground Probing Radar<br/>';
        value += 'GPS	    Global Positioning System<br/>';
        value += 'GSM	    Global System for Mobile Communications<br/>';
        value += 'GSM-R	    Global System for Mobile Communications on Railways<br/>';
        value += 'GSO	    GeoStationary Orbi");
            WriteLiteral(@"t<br/>';
        value += 'HAPS	    High Altitude Platform Station<br/>';
        value += 'HEST	    High e.i.r.p. Satellite Terminal<br/>';
        value += 'IFF	    Identification Friend or Foe<br/>';
        value += 'ILS	    Instrument Landing System<br/>';
        value += 'IMT-2000	International Mobile Telecommunications-2000<br/>';
        value += 'IMT-Advanced	Systems beyond IMT-2000<br/>';
        value += 'IMT	    International Mobile Telecommunications (includes IMT-2000 and IMT-Advanced<br/>';
        value += 'ISM	    Industrial, Scientific and Medical applications<br/>';
        value += 'ITS	    Intelligent Transport Systems<br/>';
        value += 'JTIDS	    Joint Tactical Information Distribution System<br/>';
        value += 'LAES	    Location Application for Emergency Services<br/>';
        value += 'LANs	    Local Area Networks<br/>';
        value += 'LEST	    Low e.i.r.p. Satellite Terminal<br/>';
        value += 'LP-AMI	Low Power Active Medical Implants<br/>';
       ");
            WriteLiteral(@" value += 'LPD	    Low Power Device<br/>';
        value += 'LPR	    Level Probing Radar<br/>';
        value += 'LT2	    Location Tracking Type 2<br/>';
        value += 'MBANS	    Medical Body Area Network System<br/>';
        value += 'MBR	    Maritime Broadband Radio<br/>';
        value += 'MCA	    Mobile Communications on Board Aircraft<br/>';
        value += 'MCV	    Mobile Communication Services on Board Vessels<br/>';
        value += 'MFCN	    Mobile/Fixed Communications Networks<br/>';
        value += 'MLS	    Microwave Landing System<br/>';
        value += 'MSI	    Maritime Safety Information<br/>';
        value += 'MSS	    Mobile-Satellite Service<br/>';
        value += 'MWS	    Multimedia Wireless System<br/>';
        value += 'NAVTEX	Narrow-band direct-printing telegraphy system for transmission of navigational and meteorological warnings and urgent information to ships<br/>';
        value += 'NGSO	    Non-GeoStationary Orbit<br/>';
        value += 'NMR	    Nuclear Magnet");
            WriteLiteral(@"ic Resonance applications<br/>';
        value += 'NP2M	    Narrowband Point to Multipoint system<br/>';
        value += 'PAMR	    Public Access Mobile Radio<br/>';
        value += 'PLB	    Personal Locator Beacon<br/>';
        value += 'PMR	    Private (Professional) Mobile Radio<br/>';
        value += 'PMSE	    Programme Making and Special Events<br/>';
        value += 'POCSAG	Post Office Code Standards Advisory Group<br/>';
        value += 'PPDR	    Public Protection & Disaster Relief<br/>';
        value += 'RFID	    Radio Frequency Identification<br/>';
        value += 'RLAN	    Radio Local Area Network<br/>';
        value += 'RMR	    Railway Mobile Radio<br/>';
        value += 'RTE	    Radar Target Enhancer<br/>';
        value += 'SAB	    Service Ancillary to Broadcasting<br/>';
        value += 'SAP	    Service Ancillary to Programme making<br/>';
        value += 'SAR 	    Search and Rescue<br/>';
        value += 'SATCOM	Satellite Communication<br/>';
        value += 'SIT/S");
            WriteLiteral(@"UT	Satellite Interactive Terminal / Satellite User Terminal<br/>';
        value += 'SNG	    Satellite News Gathering<br/>';
        value += 'S-PCS	    Satellite - Personal Communications System<br/>';
        value += 'SRD	    Short Range Devices<br/>';
        value += 'SRR	    Short Range Radars<br/>';
        value += 'SSR	    Secondary Surveillance Radar<br/>';
        value += 'TACAN	    Tactical Air Navigation<br/>';
        value += 'T-DAB	    Terrestrial Digital Audio Broadcasting<br/>';
        value += 'TETRA	    Terrestrial Trunked Radio<br/>';
        value += 'TETRAPOL	Digital PMR technology<br/>';
        value += 'TLPR	    Tank Level Probing Radar<br/>';
        value += 'TRA-ECS	Terrestrial radio applications capable of providing electronic communications services<br/>';
        value += 'TTT	    Transport and Traffic Telematics<br/>';
        value += 'TV	    Television<br/>';
        value += 'UAS	    Unmanned Aircraft System<br/>';
        value += 'ULP-AMI	Ultra Low Power ");
            WriteLiteral(@"Active Medical Implants<br/>';
        value += 'ULP-AID	Ultra Low Power Animal Implants Devices<br/>';
        value += 'ULP-MMI	Ultra Low Power Medical Membrane Implants<br/>';
        value += 'ULP-WMCE	Ultra-Low Power Wireless Medical Capsule Endoscopy<br/>';
        value += 'VLBI	    Very Long Baseline Interferometry<br/>';
        value += 'VOR	    VHF Omnidirectional Radio Range<br/>';
        value += 'VSAT	    Very Small Aperture Terminal<br/>';
        value += 'UWB	    Ultra Wideband<br/>';
        value += 'WAIC	    Wireless Avionics Intra-Communications systems<br/>';
        value += 'WIA	    Wireless Industrial Applications<br/>';
        value += 'WPR	    Wall Probing Radar<br/>';
        value += 'WPT	    Wireless Power Transmission<br/>';
        //$('#btnfoot').trigger('click');
        showModal(""Application abbreviations"", ""<p>"" + value + ""</p>"");

    }

    function NotesClick(env) {
        showModal(""Notes"", ""<p>"" + env + ""</p>"");
    }

    //function DocStandCl");
            WriteLiteral(@"ick(docNumber, env, docLink) {
    //    showModal(""Documents and standards"", ""<p><a href=\"""" + docLink + ""\"">"" + docNumber+"" "" + env + ""</a></p>"");
    //}

    function DocStandClick(docNumber, env, docLink) {
        //alert(docNumber);

        $('#docsHidden').append('<p><a href=\""' + docLink + '\"">' + docNumber + ' ' + env + '</a></p>');
        //element.append(""<p><a href=\"""" + docLink + ""\"">"" + docNumber + "" "" + env + ""</a></p >"");

    }

    function ShowAllValues(element,standard, isThereDocs, isThereStand) {
        //alert('value:' + isThereDocs + ',stand:' + isThereStand);

        //alert('im here:');

                        $.ajax({
                            type: ""POST"",
                            url: """);
#nullable restore
#line 195 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                             Write(Url.Action("SearchDocsAndStandards"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",

                            data: {
                                    docId: element,
                                    StandId: standard ,
                                    isThereDocs: isThereDocs,
                                    isThereStands: isThereStand
                            },

                            success: function (response) {
                                var DocText = """";

                                if (Object.keys(response).length > 0) {

                                    $.each(response, function (i, generalTemp) {

                                        DocText += '<p><a href=\""' + generalTemp.Link + '\"">' + generalTemp.CombineTitle + '</a></p>';

                                    });
                                    showModal(""Documents and standards"", DocText);

                                }

                            }
                            ,
                            failure: function (response) {
             ");
            WriteLiteral(@"                   alert(""faliure"");
                            },
                            error: function (xhr, textStatus, exceptionThrown) {
                                /*alert(""greska"");*/
                                var errorData = $.parseJSON(xhr.responseText);
                                var errorMessages = [];
                                //this ugly loop is because List<> is serialized to an object instead of an array
                                for (var key in errorData) {
                                    errorMessages.push(errorData[key]);
                                }
                                $('#error_input').html(errorMessages.join(""<br />""));
                            }
                        });

    }

    function ShowAllValuesInf(element,standard, isThereDocs, isThereStand) {
        //alert('value:' + isThereDocs + ',stand:' + isThereStand);

        //alert('im here:');

                        $.ajax({
                       ");
            WriteLiteral("     type: \"POST\",\r\n                            url: \"");
#nullable restore
#line 244 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                             Write(Url.Action("SearchDocsAndStandardsInformative"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",

                            data: {
                                    docId: element,
                                    StandId: standard ,
                                    isThereDocs: isThereDocs,
                                    isThereStands: isThereStand
                            },

                            success: function (response) {
                                var DocText = """";

                                if (Object.keys(response).length > 0) {

                                    $.each(response, function (i, generalTemp) {

                                        DocText += '<p><a href=\""' + generalTemp.Link + '\"">' + generalTemp.CombineTitle + '</a></p>';

                                    });
                                    showModal(""Documents and standards"", DocText);

                                }

                            }
                            ,
                            failure: function (response) {
             ");
            WriteLiteral(@"                   alert(""faliure"");
                            },
                            error: function (xhr, textStatus, exceptionThrown) {
                                /*alert(""greska"");*/
                                var errorData = $.parseJSON(xhr.responseText);
                                var errorMessages = [];
                                //this ugly loop is because List<> is serialized to an object instead of an array
                                for (var key in errorData) {
                                    errorMessages.push(errorData[key]);
                                }
                                $('#error_input').html(errorMessages.join(""<br />""));
                            }
                        });

    }


    function showModal(titleHtml, contentHtml) {
        const modal = document.createElement(""div"");
        //const modal = document.getElementById(""tempModal"");

        modal.classList.add(""modal_u_app"");
        modal.innerHTM");
            WriteLiteral(@"L = `
        <div class=""modal__inner"">
            <div class=""modal__top"">
                <div class=""modal__title"">${titleHtml}</div>
                <button class=""modal__close"" type=""button"">
                    <span class=""material-icons"">close</span>
                </button>
            </div>
            <div class=""modal__content"">${contentHtml}</div>
            <div class=""modal__bottom""></div>
        </div>`;



        modal.querySelector("".modal__close"").addEventListener(""click"", () => {
            document.body.removeChild(modal);
        });

        document.body.appendChild(modal);


    }



    function SearchNow() {
        var div = document.getElementById(""print_div"");
        div.style.display = ""block"";
        var SearchByValues = false;
        if ($('#application_first_value').val() != '1') {
            SearchByValues = true;
            //alert(""Works"");
            if (SearchByValues == true) {
                var number1 = parseInt($('#fro");
            WriteLiteral(@"m').val());
                var number2 = parseInt($('#to').val());
                if (number1 > number2) {
                    $('#error_input').html('Error! In From field, it is bigger than To field');
                } else {

                    if ($(""#frequency_table option:selected"").text() != '') {

                        $('#error_input').html('');
                        $.ajax({
                            type: ""POST"",
                            url: """);
#nullable restore
#line 336 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                             Write(Url.Action("SearchOnFirstLevel"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",

                            data: {
                                FromVal: $('#from').val(),
                                ToVal: $('#to').val(),
                                FrequencySizeVal: $('#frequencySize').val(),
                                FrequencyTableVal: $(""#frequency_table option:selected"").text(),
                                ApplicatonVal: $('#application_first_value').val()

                            },
                            success: function (response) {

                                if (Object.keys(response).length == 0) {
                                    //alert('poruka' + Object.keys(response).length);
                                    //$('#rData').load('Index.cshtml');
                                    $('#rData').empty();
                                    var itemsO = ""<table class='table table-sm table-striped table-hover border-bottom' style='width:80%; background-color: white;'><tr><th>Frequency</th><th>Application</th><th>Region ");
            WriteLiteral(@"code</th></tr>"";
                                    itemsO += ""</table>"";

                                    $('#rData').append(itemsO).hide().fadeIn(2000);
                                }
                                if (Object.keys(response).length > 0) {
                                    $('#rData').empty();


                                    //var items = ""<table class='table table-sm table-striped table-hover border-bottom' style='width:80%; background-color: white;'><tr><th>Frequency</th><th>Application</th><th>Region name</th><th>Region code</th></tr>"";
                                    //var pp = false;
                                    //var DocText = """";
                                    //$.each(response, function (i, generalTemp) {

                                    //    items += ""<tr><td>"" + generalTemp.LowView + ""-"" + generalTemp.HighView + ""</td><td> "";
                                    //    //items += generalTemp.Application;
                           ");
            WriteLiteral(@"         //    $.each(generalTemp.AppItemsList, function (i, member) {
                                    //        items += member.Application;
                                    //        //alert(""tt:"" + member.Doc_number);

                                    //        DocText = """";
                                    //        pp = false;
                                    //        $.each(member.Documents, function (iv, tempDoc) {

                                    //            if (Object.keys(tempDoc).length > 0) {

                                    //                if (tempDoc.Doc_number != """") {
                                    //                    pp = true;
                                    //                    DocText += '<p><a href=' + tempDoc.Hyperlink + '>' + tempDoc.Doc_number + ' ' + tempDoc.Title_of_doc + '</a></p>';
                                    //                }

                                    //            }



                               ");
            WriteLiteral(@"     //        });

                                    //        $.each(member.Standards, function (iv, tempDoc) {
                                    //            if (Object.keys(tempDoc).length > 0) {

                                    //                if (tempDoc.StandardId > 0) {
                                    //                    pp = true;

                                    //                    DocText += '<p><a href=' + tempDoc.HyperlinkS + '>' + tempDoc.Etsi_standard + ' ' + tempDoc.Title_docS + '</a></p>';

                                    //                }
                                    //            }

                                    //        });

                                    //        if (pp == true) {

                                    //            items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValues('"" + DocText + ""'); return false;\"">Regulatory docs</butto");
            WriteLiteral(@"n>"";
                                    //            $('#docsHidden').text("""");
                                    //            p = false;
                                    //        }
                                    //        //if (member.Doc_number != null) {
                                    //        //    items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onClick=\""DocStandClick('"" + member.Doc_number + ""','"" + member.Title_of_doc + ""','"" + member.Hyperlink + ""'); return false;\"">Regulatory docs</button>"";
                                    //        //}
                                    //        if (member.Comment != """") {
                                    //            items += ""&nbsp&nbsp<button style=\""width: 100px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onClick=\""NotesClick('"" + member.Comment + ""'); return false;\"">notes</button>"";
                                    //        }
     ");
            WriteLiteral(@"                               //        items += ""<br/>"";

                                    //    });
                                    //    items += ""<br/>"";


                                    //    items +=
                                    //        ""</td>"" +

                                    //        ""<td>"" + generalTemp.regionName + ""</td><td>"" + generalTemp.regionCode + ""</td></tr>"";

                                    //});
                                    //items += ""</table>"";

                                    //$('#rData').append(items).hide().fadeIn(2000);
                                        var items = ""<table class='table table-sm table-striped table-hover border-bottom' style='width:80%; background-color: white;'><tr><th>Frequency</th><th>Application</th><th>Region code</th></tr>"";
                                        var isThereDocs = false;
                                        var isThereStands = false;
                                        ");
            WriteLiteral(@"var Docs = """";
                                        var Stand = """";
                                        var isThereDocsInf = false;
                                        var isThereStandsInf = false;
                                        var DocsInf = """";
                                        var StandInf = """";
                                        var incResponse = 0;
                                        $.each(response, function (i, generalTemp) {



                                            items += ""<tr><td>"" + generalTemp.LowView + ""-"" + generalTemp.HighView + ""</td><td> "";
                                            if (incResponse == 0) {
                                                incResponse++;

                                                if (generalTemp.isAllValues) {

                                                    setTimeout(function () {
                                                        //alert();
                                           ");
            WriteLiteral(@"             $('#frequencySize').val(generalTemp.sizeFrequency).change();
                                                        $('#from').val(generalTemp.lowJson);
                                                        $('#to').val(generalTemp.highJson);

                                                    }, 200);

                                                }

                                            } else if (incResponse > 0) {

                                            }
                                            $.each(generalTemp.Application, function (i, member) {
                                                if (!member.isDeletedApp) {
                                                items += ""<p>"" + member.Application;
                                                isThereDocs = false;
                                                isThereStands = false;
                                                Docs = """";
                                                Stand ");
            WriteLiteral(@"= """";
                                                isThereDocsInf = false;
                                                isThereStandsInf = false;
                                                DocsInf = """";
                                                StandInf = """";
                                                if (Object.keys(member.DocumentsAditional).length > 0) {

                                                    for (var tt = 0; tt < member.DocumentsAditional.length; tt++) {
                                                        if (tt == Object.keys(member.DocumentsAditional).length - 1) {
                                                            if (member.DocumentsAditional[tt].isRegulatory == true) {
                                                                Docs += member.DocumentsAditional[tt].DocumentId;
                                                                isThereDocs = true;
                                                            } else if (member.");
            WriteLiteral(@"DocumentsAditional[tt].isRegulatory == false) {
                                                                DocsInf += member.DocumentsAditional[tt].DocumentId;
                                                                isThereDocsInf = true;
                                                            }
                                                        }
                                                        else {
                                                            if (member.DocumentsAditional[tt].isRegulatory == true) {
                                                                Docs += member.DocumentsAditional[tt].DocumentId + "","";
                                                                isThereDocs = true;
                                                            } else if (member.DocumentsAditional[tt].isRegulatory == false) {
                                                                DocsInf += member.DocumentsAditional[tt].DocumentId + "","";
       ");
            WriteLiteral(@"                                                         isThereDocsInf = true;
                                                            }

                                                        }
                                                    }
                                                } else {
                                                    isThereDocs = false;
                                                    isThereDocsInf = false;
                                                }
                                                if (Object.keys(member.StandardsAditional).length > 0) {

                                                    for (var tt = 0; tt < member.StandardsAditional.length; tt++) {
                                                        if (tt == Object.keys(member.StandardsAditional).length - 1) {
                                                            if (member.StandardsAditional[tt].isRegulatory == true) {
                                        ");
            WriteLiteral(@"                        Stand += member.StandardsAditional[tt].StandardId;
                                                                isThereStands = true;
                                                            } else if (member.StandardsAditional[tt].isRegulatory == false) {
                                                                StandInf += member.StandardsAditional[tt].StandardId;
                                                                isThereStandsInf = true;
                                                            }

                                                        }
                                                        else {
                                                            if (member.StandardsAditional[tt].isRegulatory == true) {
                                                                Stand += member.StandardsAditional[tt].StandardId + "","";
                                                                isThereStands = true;
         ");
            WriteLiteral(@"                                                   } else if (member.StandardsAditional[tt].isRegulatory == false) {
                                                                StandInf += member.StandardsAditional[tt].StandardId + "","";
                                                                isThereStandsInf = true;
                                                            }

                                                        }
                                                    }
                                                } else {
                                                    isThereStands = false;
                                                    isThereStandsInf = false;
                                                }
                                                if (isThereDocs && !isThereStands) {
                                                    items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px");
            WriteLiteral(@";\"" onclick=\""ShowAllValues('"" + Docs + ""','"" + Stand + ""','"" + isThereDocs + ""','"" + isThereStands + ""'); return false; \"">Regulatory docs</button>"";

                                                }
                                                else if (!isThereDocs && isThereStands) {
                                                    items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValues('"" + Docs + ""','"" + Stand + ""','"" + isThereDocs + ""','"" + isThereStands + ""'); return false; \"">Regulatory docs</button>"";
                                                }
                                                else if (isThereDocs && isThereStands) {
                                                    items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValues('"" + Docs + ""','"" + Stand + ""','"" + isThereDocs + ""','"" + isThereStands + ""'); retu");
            WriteLiteral(@"rn false; \"">Regulatory docs</button>"";
                                                }

                                                if (member.Comment != """") {
                                                    items += ""&nbsp&nbsp<button style=\""width: 100px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onClick=\""NotesClick('"" + member.Comment + ""'); return false;\"">Notes</button>"";
                                                }
                                                if (isThereDocsInf && !isThereStandsInf) {
                                                    items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValuesInf('"" + DocsInf + ""','"" + StandInf + ""','"" + isThereDocsInf + ""','"" + isThereStandsInf + ""'); return false; \"">Informative docs</button>"";

                                                }
                                                else if (!isThereDocsInf && isT");
            WriteLiteral(@"hereStandsInf) {
                                                    items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValuesInf('"" + DocsInf + ""','"" + StandInf + ""','"" + isThereDocsInf + ""','"" + isThereStandsInf + ""'); return false; \"">Informative docs</button>"";
                                                }
                                                else if (isThereDocsInf && isThereStandsInf) {
                                                    items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValuesInf('"" + DocsInf + ""','"" + StandInf + ""','"" + isThereDocsInf + ""','"" + isThereStandsInf + ""'); return false; \"">Informative docs</button>"";
                                                }
                                                Docs = """";
                                                Stand = """";
                           ");
            WriteLiteral(@"                     DocsInf = """";
                                                StandInf = """";
                                                isThereDocsInf = false;
                                                isThereStandsInf = false;
                                                isThereDocs = false;
                                                isThereStands = false;
                                            }
                                            });
                                            items += ""</p><br/>"";


                                            items += ""</td>"" + ""<td>"" + generalTemp.regionCode + ""</td></tr>"";
                                        });

                                        items += ""</table>"";

                                        $('#rData').append(items).hide().fadeIn(2000);
                                }

                            }
                            ,
                            failure: function (response) ");
            WriteLiteral(@"{
                                alert(""faliure"");
                            },
                            error: function (xhr, textStatus, exceptionThrown) {
                                /*alert(""greska"");*/
                                var errorData = $.parseJSON(xhr.responseText);
                                var errorMessages = [];
                                //this ugly loop is because List<> is serialized to an object instead of an array
                                for (var key in errorData) {
                                    errorMessages.push(errorData[key]);
                                }
                                $('#error_input').html(errorMessages.join(""<br />""));
                            }
                        });
                    } else {
                        $('#error_input').html('Error! You didn\'t select any value from field frequency table');
                    }
                }
            }
        }
        if ($('#appl");
            WriteLiteral(@"ication_two_value').val() != '1') {

            SearchByValues = true;
            if (SearchByValues == true) {
                //alert(""execute condition"");
                var number1 = parseInt($('#from').val());
                var number2 = parseInt($('#to').val());
                if (number1 > number2) {
                    $('#error_input').html('Error! In From field, it is bigger than To field');
                } else {
                    if ($(""#frequency_table option:selected"").text() != '') {
                        //alert(""Works"" + $('#from').val() + ""=="" + $('#to').val() + ""..."" + $('#frequencySize').val() + ""___"" + $(""#frequency_table option:selected"").text() + "":::"" + $('#application_two_value').val());
                        $('#error_input').html('');
                         $.ajax({
                        type: ""POST"",
                        url: """);
#nullable restore
#line 610 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                         Write(Url.Action("SearchOnSecondLevel"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",

                        data: {
                            FromVal: $('#from').val(),
                            ToVal: $('#to').val(),
                            FrequencySizeVal: $('#frequencySize').val(),
                            FrequencyTableVal: $(""#frequency_table option:selected"").text(),
                            ApplicatonVal: $('#application_two_value').val()

                        },
                        success: function (response) {

                            if (Object.keys(response).length == 0) {
                                //alert('poruka' + Object.keys(response).length);
                                //$('#rData').load('Index.cshtml');
                                $('#rData').empty();
                                var itemsO = ""<table id='SearchAppTableId' class='table table-sm table-striped table-hover border-bottom' style='width:80%; background-color: white;'><tr><th>Frequency</th><th>Application</th><th>Region code</th></tr>"";
              ");
            WriteLiteral(@"                  itemsO += ""</table>"";

                                $('#rData').append(itemsO).hide().fadeIn(2000);
                            }
                            if (Object.keys(response).length > 0) {
                                $('#rData').empty();

                                var items = ""<table  id='SearchAppTableId' class='table table-sm table-striped table-hover border-bottom' style='width:80%; background-color: white;'><tr><th>Frequency</th><th>Application</th><th>Region code</th></tr>"";
                                var isThereDocs = false;
                                var isThereStands = false;
                                var Docs = """";
                                var Stand = """";
                                var isThereDocsInf = false;
                                var isThereStandsInf = false;
                                var DocsInf = """";
                                var StandInf = """";
                                var noApps = fals");
            WriteLiteral(@"e;
                                var incResponse = 0;
                                $.each(response, function (i, generalTemp) {
                                    items += ""<tr><td>"" + generalTemp.LowView + ""-"" + generalTemp.HighView + ""</td><td> "";
                                    if (incResponse == 0) {
                                        incResponse++;

                                        if (generalTemp.isAllValues) {

                                            setTimeout(function () {
                                                //alert();
                                                $('#frequencySize').val(generalTemp.sizeFrequency).change();
                                                $('#from').val(generalTemp.lowJson);
                                                $('#to').val(generalTemp.highJson);

                                            }, 200);

                                        }

                                    } else if (incRespons");
            WriteLiteral(@"e > 0) {

                                    }
                                    noApps = false;
                                    $.each(generalTemp.Application, function (i, member) {
                                        if (!member.isDeletedApp) {
                                        items += ""<p>"" + member.Application;
                                        isThereDocs = false;
                                        isThereStands = false;
                                        Docs = """";
                                        Stand = """";
                                        isThereDocsInf = false;
                                        isThereStandsInf = false;
                                        DocsInf = """";
                                        StandInf = """";
                                        if (Object.keys(member.DocumentsAditional).length > 0) {

                                            for (var tt = 0; tt < member.DocumentsAditional.length; tt++) {");
            WriteLiteral(@"
                                                if (tt == Object.keys(member.DocumentsAditional).length - 1) {
                                                    if (member.DocumentsAditional[tt].isRegulatory == true) {
                                                        Docs += member.DocumentsAditional[tt].DocumentId;
                                                        isThereDocs = true;
                                                    } else if (member.DocumentsAditional[tt].isRegulatory == false) {
                                                        DocsInf += member.DocumentsAditional[tt].DocumentId;
                                                        isThereDocsInf = true;
                                                    }
                                                }
                                                else {
                                                    if (member.DocumentsAditional[tt].isRegulatory == true) {
                                 ");
            WriteLiteral(@"                       Docs += member.DocumentsAditional[tt].DocumentId + "","";
                                                        isThereDocs = true;
                                                    } else if (member.DocumentsAditional[tt].isRegulatory == false) {
                                                        DocsInf += member.DocumentsAditional[tt].DocumentId + "","";
                                                        isThereDocsInf = true;
                                                    }

                                                }
                                            }
                                        } else {
                                            isThereDocs = false;
                                            isThereDocsInf = false;
                                        }
                                        if (Object.keys(member.StandardsAditional).length > 0) {

                                            for (var tt = 0; tt < mem");
            WriteLiteral(@"ber.StandardsAditional.length; tt++) {
                                                if (tt == Object.keys(member.StandardsAditional).length - 1) {
                                                    if (member.StandardsAditional[tt].isRegulatory == true) {
                                                        Stand += member.StandardsAditional[tt].StandardId;
                                                        isThereStands = true;
                                                    } else if (member.StandardsAditional[tt].isRegulatory == false) {
                                                        StandInf += member.StandardsAditional[tt].StandardId;
                                                        isThereStandsInf = true;
                                                    }

                                                }
                                                else {
                                                    if (member.StandardsAditional[tt].isRegulatory");
            WriteLiteral(@" == true) {
                                                        Stand += member.StandardsAditional[tt].StandardId + "","";
                                                        isThereStands = true;
                                                    } else if (member.StandardsAditional[tt].isRegulatory == false) {
                                                        StandInf += member.StandardsAditional[tt].StandardId + "","";
                                                        isThereStandsInf = true;
                                                    }

                                                }
                                            }
                                        } else {
                                            isThereStands = false;
                                            isThereStandsInf = false;
                                        }
                                        if (isThereDocs && !isThereStands) {
                                   ");
            WriteLiteral(@"         items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValues('"" + Docs + ""','"" + Stand + ""','"" + isThereDocs + ""','"" + isThereStands + ""'); return false; \"">Regulatory docs</button>"";

                                        }
                                        else if (!isThereDocs && isThereStands) {
                                            items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValues('"" + Docs + ""','"" + Stand + ""','"" + isThereDocs + ""','"" + isThereStands + ""'); return false; \"">Regulatory docs</button>"";
                                        }
                                        else if (isThereDocs && isThereStands) {
                                            items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValues('"" + Docs + ");
            WriteLiteral(@"""','"" + Stand + ""','"" + isThereDocs + ""','"" + isThereStands + ""'); return false; \"">Regulatory docs</button>"";
                                        }

                                        if (member.Comment != """") {
                                            items += ""&nbsp&nbsp<button style=\""width: 100px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onClick=\""NotesClick('"" + member.Comment + ""'); return false;\"">Notes</button>"";
                                        }

                                        if (isThereDocsInf && !isThereStandsInf) {
                                            items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValuesInf('"" + DocsInf + ""','"" + StandInf + ""','"" + isThereDocsInf + ""','"" + isThereStandsInf + ""'); return false; \"">Informative docs</button>"";

                                        }
                                        else if (!isThereDocsI");
            WriteLiteral(@"nf && isThereStandsInf) {
                                            items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValuesInf('"" + DocsInf + ""','"" + StandInf + ""','"" + isThereDocsInf + ""','"" + isThereStandsInf + ""'); return false; \"">Informative docs</button>"";
                                        }
                                        else if (isThereDocsInf && isThereStandsInf) {
                                            items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValuesInf('"" + DocsInf + ""','"" + StandInf + ""','"" + isThereDocsInf + ""','"" + isThereStandsInf + ""'); return false; \"">Informative docs</button>"";
                                        }
                                        Docs = """";
                                        Stand = """";
                                        DocsInf = """";
                   ");
            WriteLiteral(@"                     StandInf = """";
                                        isThereDocsInf = false;
                                        isThereStandsInf = false;
                                        isThereDocs = false;
                                        isThereStands = false;
                                    }
                                    });
                                    
                                       items += ""</p><br/>"";

                                       items += ""</td>"" + ""<td>"" + generalTemp.regionCode + ""</td></tr>"";
                                   

                                });

                                items += ""</table>"";

                                $('#rData').append(items).hide().fadeIn(2000);
                            }

                        }
                        ,
                        failure: function (response) {
                            alert(""faliure"");
                        },
        ");
            WriteLiteral(@"                error: function (xhr, textStatus, exceptionThrown) {
                            //alert(""error calls"");
                            var errorData = $.parseJSON(xhr.responseText);
                            var errorMessages = [];
                            //this ugly loop is because List<> is serialized to an object instead of an array
                            for (var key in errorData) {
                                errorMessages.push(errorData[key]);
                            }
                            $('#error_input').html(errorMessages.join(""<br />""));
                        }
                    });
                    } else {
                        $('#error_input').html('Error! You didn\'t select any value from field frequency table');
                    }
                }
            }
        }
        if ($('#application_third_value').val() != '1') {
            SearchByValues = true;
            //alert(""Works"");
            if (SearchByValue");
            WriteLiteral(@"s == true) {
                var number1 = parseInt($('#from').val());
                var number2 = parseInt($('#to').val());
                if (number1 > number2) {
                    $('#error_input').html('Error! In From field, it is bigger than To field');
                } else {

                    if ($(""#frequency_table option:selected"").text() != '') {

                        $('#error_input').html('');
                        $.ajax({
                            type: ""POST"",
                            url: """);
#nullable restore
#line 817 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                             Write(Url.Action("SearchOnThirdLevel"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",

                            data: {
                                FromVal: $('#from').val(),
                                ToVal: $('#to').val(),
                                FrequencySizeVal: $('#frequencySize').val(),
                                FrequencyTableVal: $(""#frequency_table option:selected"").text(),
                                ApplicatonVal: $('#application_third_value').val()

                            },
                            success: function (response) {

                                if (Object.keys(response).length == 0) {
                                    //alert('poruka' + Object.keys(response).length);
                                    //$('#rData').load('Index.cshtml');
                                    $('#rData').empty();
                                    var itemsO = ""<table class='table table-sm table-striped table-hover border-bottom' style='width:80%; background-color: white;'><tr><th>Frequency</th><th>Application</th><th>Region ");
            WriteLiteral(@"code</th></tr>"";
                                    itemsO += ""</table>"";

                                    $('#rData').append(itemsO).hide().fadeIn(2000);
                                }
                                if (Object.keys(response).length > 0) {
                                    $('#rData').empty();


                                    var items = ""<table class='table table-sm table-striped table-hover border-bottom' style='width:80%; background-color: white;'><tr><th>Frequency</th><th>Application</th><th>Region code</th></tr>"";
                                    var isThereDocs = false;
                                    var isThereStands = false;
                                    var Docs = """";
                                    var Stand = """";
                                    var isThereDocsInf = false;
                                    var isThereStandsInf = false;
                                    var DocsInf = """";
                                    va");
            WriteLiteral(@"r StandInf = """";
                                    var incResponse = 0;
                                    $.each(response, function (i, generalTemp) {
                                        items += ""<tr><td>"" + generalTemp.LowView + ""-"" + generalTemp.HighView + ""</td><td> "";
                                        if (incResponse == 0) {
                                            incResponse++;

                                            if (generalTemp.isAllValues) {

                                                setTimeout(function () {
                                                    //alert();
                                                    $('#frequencySize').val(generalTemp.sizeFrequency).change();
                                                    $('#from').val(generalTemp.lowJson);
                                                    $('#to').val(generalTemp.highJson);

                                                }, 200);

                                        ");
            WriteLiteral(@"    }

                                        } else if (incResponse > 0) {

                                        }
                                        $.each(generalTemp.Application, function (i, member) {
                                            if (!member.isDeletedApp) {
                                            items += ""<p>"" + member.Application;
                                            isThereDocs = false;
                                            isThereStands = false;
                                            Docs = """";
                                            Stand = """";
                                            isThereDocsInf = false;
                                            isThereStandsInf = false;
                                            DocsInf = """";
                                            StandInf = """";
                                            if (Object.keys(member.DocumentsAditional).length > 0) {

                                      ");
            WriteLiteral(@"          for (var tt = 0; tt < member.DocumentsAditional.length; tt++) {
                                                    if (tt == Object.keys(member.DocumentsAditional).length - 1) {
                                                        if (member.DocumentsAditional[tt].isRegulatory == true) {
                                                            Docs += member.DocumentsAditional[tt].DocumentId;
                                                            isThereDocs = true;
                                                        } else if (member.DocumentsAditional[tt].isRegulatory == false) {
                                                            DocsInf += member.DocumentsAditional[tt].DocumentId;
                                                            isThereDocsInf = true;
                                                        }
                                                    }
                                                    else {
                               ");
            WriteLiteral(@"                         if (member.DocumentsAditional[tt].isRegulatory == true) {
                                                            Docs += member.DocumentsAditional[tt].DocumentId + "","";
                                                            isThereDocs = true;
                                                        } else if (member.DocumentsAditional[tt].isRegulatory == false) {
                                                            DocsInf += member.DocumentsAditional[tt].DocumentId + "","";
                                                            isThereDocsInf = true;
                                                        }

                                                    }
                                                }
                                            } else {
                                                isThereDocs = false;
                                                isThereDocsInf = false;
                                            }
    ");
            WriteLiteral(@"                                        if (Object.keys(member.StandardsAditional).length > 0) {

                                                for (var tt = 0; tt < member.StandardsAditional.length; tt++) {
                                                    if (tt == Object.keys(member.StandardsAditional).length - 1) {
                                                        if (member.StandardsAditional[tt].isRegulatory == true) {
                                                            Stand += member.StandardsAditional[tt].StandardId;
                                                            isThereStands = true;
                                                        } else if (member.StandardsAditional[tt].isRegulatory == false) {
                                                            StandInf += member.StandardsAditional[tt].StandardId;
                                                            isThereStandsInf = true;
                                                        }

");
            WriteLiteral(@"                                                    }
                                                    else {
                                                        if (member.StandardsAditional[tt].isRegulatory == true) {
                                                            Stand += member.StandardsAditional[tt].StandardId + "","";
                                                            isThereStands = true;
                                                        } else if (member.StandardsAditional[tt].isRegulatory == false) {
                                                            StandInf += member.StandardsAditional[tt].StandardId + "","";
                                                            isThereStandsInf = true;
                                                        }

                                                    }
                                                }
                                            } else {
                                          ");
            WriteLiteral(@"      isThereStands = false;
                                                isThereStandsInf = false;
                                            }
                                            if (isThereDocs && !isThereStands) {
                                                items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValues('"" + Docs + ""','"" + Stand + ""','"" + isThereDocs + ""','"" + isThereStands + ""'); return false; \"">Regulatory docs</button>"";

                                            }
                                            else if (!isThereDocs && isThereStands) {
                                                items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValues('"" + Docs + ""','"" + Stand + ""','"" + isThereDocs + ""','"" + isThereStands + ""'); return false; \"">Regulatory docs</button>"";
                                  ");
            WriteLiteral(@"          }
                                            else if (isThereDocs && isThereStands) {
                                                items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValues('"" + Docs + ""','"" + Stand + ""','"" + isThereDocs + ""','"" + isThereStands + ""'); return false; \"">Regulatory docs</button>"";
                                            }

                                            if (member.Comment != """") {
                                                items += ""&nbsp&nbsp<button style=\""width: 100px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onClick=\""NotesClick('"" + member.Comment + ""'); return false;\"">Notes</button>"";
                                            }
                                            if (isThereDocsInf && !isThereStandsInf) {
                                                items += ""&nbsp&nbsp<button style=\""width: 150px; background-color");
            WriteLiteral(@": #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValuesInf('"" + DocsInf + ""','"" + StandInf + ""','"" + isThereDocsInf + ""','"" + isThereStandsInf + ""'); return false; \"">Informative docs</button>"";

                                            }
                                            else if (!isThereDocsInf && isThereStandsInf) {
                                                items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValuesInf('"" + DocsInf + ""','"" + StandInf + ""','"" + isThereDocsInf + ""','"" + isThereStandsInf + ""'); return false; \"">Informative docs</button>"";
                                            }
                                            else if (isThereDocsInf && isThereStandsInf) {
                                                items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValuesInf('"" + DocsInf + """);
            WriteLiteral(@"','"" + StandInf + ""','"" + isThereDocsInf + ""','"" + isThereStandsInf + ""'); return false; \"">Informative docs</button>"";
                                            }
                                            //


                                            Docs = """";
                                            Stand = """";
                                            DocsInf = """";
                                            StandInf = """";
                                            isThereDocsInf = false;
                                            isThereStandsInf = false;
                                            isThereDocs = false;
                                            isThereStands = false;
                                        }
                                        });
                                        items += ""</p><br/>"";


                                        items += ""</td>"" + ""<td>"" + generalTemp.regionCode + ""</td></tr>"";
                                   ");
            WriteLiteral(@" });

                                    items += ""</table>"";

                                    $('#rData').append(items).hide().fadeIn(2000);
                                }

                            }
                            ,
                            failure: function (response) {
                                alert(""faliure"");
                            },
                            error: function (xhr, textStatus, exceptionThrown) {
                                /*alert(""greska"");*/
                                var errorData = $.parseJSON(xhr.responseText);
                                var errorMessages = [];
                                //this ugly loop is because List<> is serialized to an object instead of an array
                                for (var key in errorData) {
                                    errorMessages.push(errorData[key]);
                                }
                                $('#error_input').html(errorMessages.joi");
            WriteLiteral(@"n(""<br />""));
                            }
                        });
                    } else {
                        $('#error_input').html('Error! You didn\'t select any value from field frequency table');
                    }
                }
            }
        }
        if (SearchByValues == false) {
           // alert(""Work vvvv"" + $(""#frequency_table option:selected"").text());
            var number1 = parseInt($('#from').val());
            var number2 = parseInt($('#to').val());
            if (number1 > number2) {
                $('#error_input').html('Error! In From field, it is bigger than To field');
            } else {
                if ($(""#frequency_table option:selected"").text() != '') {
                    $('#error_input').html('');
                    //alert(""Work vvvv"");
                    $.ajax({
                        type: ""POST"",
                        url: """);
#nullable restore
#line 1020 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                         Write(Url.Action("GeneralSearch"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",

                        data: {
                            FromVal: $('#from').val(),
                            ToVal: $('#to').val(),
                            FrequencySizeVal: $('#frequencySize').val(),
                            FrequencyTableVal: $(""#frequency_table option:selected"").text()

                        },
                        success: function (response) {

                            if (Object.keys(response).length == 0) {
                                alert('poruka' + Object.keys(response).length);
                                //$('#rData').load('Index.cshtml');
                                $('#rData').empty();
                                var itemsO = ""<table class='table table-sm table-striped table-hover border-bottom' style='width:80%; background-color: white;'><tr><th>Frequency</th><th>Application</th><th>Region code</th></tr>"";
                                itemsO += ""</table>"";

                                $('#rData').append(itemsO).h");
            WriteLiteral(@"ide().fadeIn(2000);
                            }
                            if (Object.keys(response).length > 0) {
                                $('#rData').empty();

                                //alert(""Work vvvv"");  --
                                var items = ""<table class='table table-sm table-striped table-hover border-bottom' style='width:80%; background-color: white;'><tr><th>Frequency</th><th>Application</th><th>Region code</th></tr>"";
                                var isThereDocs = false;
                                var isThereStands = false;
                                var Docs = """";
                                var Stand = """";
                                var isThereDocsInf = false;
                                var isThereStandsInf = false;
                                var DocsInf = """";
                                var StandInf = """";
                                var incResponse = 0;
                                $.each(response, function (i, ");
            WriteLiteral(@"generalTemp) {
                                    if (incResponse == 0) {
                                        incResponse++;

                                        if (generalTemp.isAllValues) {

                                            setTimeout(function () {
                                                //alert();
                                                $('#frequencySize').val(generalTemp.sizeFrequency).change();
                                                $('#from').val(generalTemp.lowJson);
                                                $('#to').val(generalTemp.highJson);

                                            }, 200);

                                        }

                                    } else if (incResponse > 0) {

                                    }
                                        items += ""<tr><td>"" + generalTemp.LowView + ""-"" + generalTemp.HighView + ""</td><td>"";

                                    $.each(generalTemp.Applicati");
            WriteLiteral(@"on, function (i, member) {
                                        if (!member.isDeletedApp) {
                                        items += ""<p>"" + member.Application;
                                        isThereDocs = false;
                                        isThereStands = false;
                                        Docs = """";
                                        Stand = """";
                                        isThereDocsInf = false;
                                        isThereStandsInf = false;
                                        DocsInf = """";
                                        StandInf = """";
                                        if (Object.keys(member.DocumentsAditional).length > 0) {

                                            for (var tt = 0; tt < member.DocumentsAditional.length; tt++) {
                                                if (tt == Object.keys(member.DocumentsAditional).length - 1) {
                                                    if");
            WriteLiteral(@" (member.DocumentsAditional[tt].isRegulatory == true) {
                                                        Docs += member.DocumentsAditional[tt].DocumentId;
                                                        isThereDocs = true;
                                                    } else if (member.DocumentsAditional[tt].isRegulatory == false) {
                                                        DocsInf += member.DocumentsAditional[tt].DocumentId;
                                                        isThereDocsInf = true;
                                                    }
                                                }
                                                else {
                                                    if (member.DocumentsAditional[tt].isRegulatory == true) {
                                                        Docs += member.DocumentsAditional[tt].DocumentId + "","";
                                                        isThereDocs = true;
           ");
            WriteLiteral(@"                                         } else if (member.DocumentsAditional[tt].isRegulatory == false) {
                                                        DocsInf += member.DocumentsAditional[tt].DocumentId + "","";
                                                        isThereDocsInf = true;
                                                    }

                                                }
                                            }
                                        } else {
                                            isThereDocs = false;
                                            isThereDocsInf = false;
                                        }
                                        if (Object.keys(member.StandardsAditional).length > 0) {

                                            for (var tt = 0; tt < member.StandardsAditional.length; tt++) {
                                                if (tt == Object.keys(member.StandardsAditional).length - 1) {
                ");
            WriteLiteral(@"                                    if (member.StandardsAditional[tt].isRegulatory == true) {
                                                        Stand += member.StandardsAditional[tt].StandardId;
                                                        isThereStands = true;
                                                    } else if (member.StandardsAditional[tt].isRegulatory == false) {
                                                        StandInf += member.StandardsAditional[tt].StandardId;
                                                        isThereStandsInf = true;
                                                    }

                                                }
                                                else {
                                                    if (member.StandardsAditional[tt].isRegulatory == true) {
                                                        Stand += member.StandardsAditional[tt].StandardId + "","";
                                         ");
            WriteLiteral(@"               isThereStands = true;
                                                    } else if (member.StandardsAditional[tt].isRegulatory == false) {
                                                        StandInf += member.StandardsAditional[tt].StandardId + "","";
                                                        isThereStandsInf = true;
                                                    }

                                                }
                                            }
                                        } else {
                                            isThereStands = false;
                                            isThereStandsInf = false;
                                        }
                                        if (isThereDocs && !isThereStands) {
                                            items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValues('"" + Docs + ""','"" + S");
            WriteLiteral(@"tand + ""','"" + isThereDocs + ""','"" + isThereStands + ""'); return false; \"">Regulatory docs</button>"";

                                        }
                                        else if (!isThereDocs && isThereStands) {
                                            items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValues('"" + Docs + ""','"" + Stand + ""','"" + isThereDocs + ""','"" + isThereStands + ""'); return false; \"">Regulatory docs</button>"";
                                        }
                                        else if (isThereDocs && isThereStands) {
                                            items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValues('"" + Docs + ""','"" + Stand + ""','"" + isThereDocs + ""','"" + isThereStands + ""'); return false; \"">Regulatory docs</button>"";
                                        }

           ");
            WriteLiteral(@"                             if (member.Comment != """") {
                                            items += ""&nbsp&nbsp<button style=\""width: 100px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onClick=\""NotesClick('"" + member.Comment + ""'); return false;\"">Notes</button>"";
                                        }
                                        if (isThereDocsInf && !isThereStandsInf) {
                                            items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValuesInf('"" + DocsInf + ""','"" + StandInf + ""','"" + isThereDocsInf + ""','"" + isThereStandsInf + ""'); return false; \"">Informative docs</button>"";

                                        }
                                        else if (!isThereDocsInf && isThereStandsInf) {
                                            items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin");
            WriteLiteral(@"-bottom:5px;\"" onclick=\""ShowAllValuesInf('"" + DocsInf + ""','"" + StandInf + ""','"" + isThereDocsInf + ""','"" + isThereStandsInf + ""'); return false; \"">Informative docs</button>"";
                                        }
                                        else if (isThereDocsInf && isThereStandsInf) {
                                            items += ""&nbsp&nbsp<button style=\""width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"" onclick=\""ShowAllValuesInf('"" + DocsInf + ""','"" + StandInf + ""','"" + isThereDocsInf + ""','"" + isThereStandsInf + ""'); return false; \"">Informative docs</button>"";
                                        }
                                        //


                                        Docs = """";
                                        Stand = """";
                                        DocsInf = """";
                                        StandInf = """";
                                        isThereDocsInf = false;
                    ");
            WriteLiteral(@"                    isThereStandsInf = false;
                                        isThereDocs = false;
                                        isThereStands = false;
                                    }
                                                });
                                                items += ""</p><br/>"";


                                                items +=""</td>"" +""<td>"" + generalTemp.regionCode + ""</td></tr>"";
                                            });

                                            items += ""</table>"";

                                            $('#rData').append(items).hide().fadeIn(2000);

                            }
                        }
                        ,
                        failure: function (response) {
                            alert(""faliure"");
                        },
                        error: function (xhr, textStatus, exceptionThrown) {
                            /*alert(""greska"");*/
             ");
            WriteLiteral(@"               var errorData = $.parseJSON(xhr.responseText);
                            var errorMessages = [];
                            //this ugly loop is because List<> is serialized to an object instead of an array
                            for (var key in errorData) {
                                errorMessages.push(errorData[key]);
                            }
                            $('#error_input').html(errorMessages.join(""<br />""));
                        }
                    });
                } else {
                    $('#error_input').html('Error! You didn\'t select any value from field frequency table');
                }
            }
        }
    }
    function InputAction(e) {
        //alert(""You pressed a key inside the input field"");
        var evt = (e) ? e : window.event;
        var charCode = (evt.keyCode) ? evt.keyCode : evt.which;
        if (charCode == 144 || charCode == 12 || charCode == 8) {
            return true;
        }
        if");
            WriteLiteral(@" ((charCode >= 96 && charCode <= 105) || (charCode >= 48 && charCode <= 57)) {
            return true;
        } else {
            return false;
            //alert(""You pressed a key inside the input field"");
        }
    }
    function FirstChange() {
        //alert(""Works"");
        if ($('#application_first_value').val() != '1') {
            $('#application_two_value').val('1').change();
            $('#application_third_value').val('1').change();
            $('#allocation_fourth_value').val('1').change();
        }
    }

    function SecondChange() {
        //alert(""Works"");
        if ($('#application_two_value').val() != '1') {
            $('#application_first_value').val('1').change();
            $('#application_third_value').val('1').change();
            $('#allocation_fourth_value').val('1').change();
        }
    }

    function ThirdChange() {
        //alert(""Works"");
        if ($('#application_third_value').val() != '1') {
            $('#application_firs");
            WriteLiteral(@"t_value').val('1').change();
            $('#application_two_value').val('1').change();
            $('#allocation_fourth_value').val('1').change();
        }
    }
    var modal = document.getElementById(""myModal"");

    var span = document.getElementsByClassName(""close"")[0];

    function dialogue_box() {
        modal.style.display = ""block"";
    }

    $(function(){
        $('#download_pdf').click(function () {

            var selected = $(""#frequency_table :selected"").map((_, e) => e.value).get();
            $.ajax({
                type: ""POST"",
                url: """);
#nullable restore
#line 1265 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                 Write(Url.Action("DownloadPDF", "AllocationSearch"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                data: {
                    AllVal1: $('#allocation_first_value').val(),
                    AllVal2: $('#allocation_two_value').val(),
                    AllVal3: $('#allocation_third_value').val(),
                    AllVal4: $(""#allocation_fourth_value option:selected"").text(),
                    FromVal: $('#from').val(),
                    ToVal: $('#to').val(),
                    FrequencySizeVal: $('#frequencySize').val(),
                    FreqTable: $(""#frequency_table option:selected"").text(),
                    FreqTableVal: selected
                },
                responseType: 'arraybuffer',
                success: function (response) {

                    var binaryString = atob(response);

                    // Convert the binary string to an ArrayBuffer
                    var arrayBuffer = new ArrayBuffer(binaryString.length);
                    var uint8Array = new Uint8Array(arrayBuffer);
                    for (var i = 0; i < binaryStr");
            WriteLiteral(@"ing.length; i++) {
                        uint8Array[i] = binaryString.charCodeAt(i);
                    }

                    // Create a Blob from the ArrayBuffer
                    var blob = new Blob([arrayBuffer], { type: 'pdf' });

                    // Create a temporary link element
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);

                    // Set the file name for the downloaded Excel file
                    link.download = 'freq_band.pdf';

                    // Programmatically trigger the download
                    link.click();


                },
                failure: function (response) {
                    alert(""Failure: An error occurred while making the AJAX request."");
                },
                error: function (response) {
                    alert(""Error: An error occurred while making the AJAX request."");
                }
            });
        });
");
            WriteLiteral("\n        $(\'#download_excel\').click(function () {\r\n            var selected = $(\"#frequency_table :selected\").map((_, e) => e.value).get();\r\n\r\n            $.ajax({\r\n                type: \"POST\",\r\n                url: \"");
#nullable restore
#line 1318 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                 Write(Url.Action("DownloadExcel", "AllocationSearch"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                data: {
                    AllVal1: $('#allocation_first_value').val(),
                    AllVal2: $('#allocation_two_value').val(),
                    AllVal3: $('#allocation_third_value').val(),
                    AllVal4: $(""#allocation_fourth_value option:selected"").text(),
                    FromVal: $('#from').val(),
                    ToVal: $('#to').val(),
                    FrequencySizeVal: $('#frequencySize').val(),
                    FreqTable: $(""#frequency_table option:selected"").text(),
                    FreqTableVal: selected
                },
                responseType: 'arraybuffer',
                success: function (response) {
                    // Create a Blob from the response data
                    var binaryString = atob(response);

                    // Convert the binary string to an ArrayBuffer
                    var arrayBuffer = new ArrayBuffer(binaryString.length);
                    var uint8Array = new Uint8Array(array");
            WriteLiteral(@"Buffer);
                    for (var i = 0; i < binaryString.length; i++) {
                        uint8Array[i] = binaryString.charCodeAt(i);
                    }

                    // Create a Blob from the ArrayBuffer
                    var blob = new Blob([arrayBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

                    // Create a temporary link element
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);

                    // Set the file name for the downloaded Excel file
                    link.download = 'freq_band.xlsx';

                    // Programmatically trigger the download
                    link.click();
                },
                failure: function (response) {
                    alert(""Failure: An error occurred while making the AJAX request."");
                },
                error: function (response) {
                   ");
            WriteLiteral(" alert(\"Error: An error occurred while making the AJAX request.\");\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n</script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "309028ec2fb3cb6ca432b385be02300bb6624d66107379", async() => {
                WriteLiteral("\r\n    <div class=\"centerpanel\">\r\n        <div class=\"left>Application</div>\r\n    </div>\r\n    <div class=\"right\">\r\n        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "309028ec2fb3cb6ca432b385be02300bb6624d66107772", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    </div>
    </div>

    <br />
    <div style=""background-color: white; width: 70%; margin-top: 30px; padding-top:30px;"" class=""center"">
        <br />
        <div class=""form-group center_top_menu"" style=""width: 90%; height:100%"">
            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("label", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "309028ec2fb3cb6ca432b385be02300bb6624d66109296", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
#nullable restore
#line 1379 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => applicationService.Frequency);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n            <p> &nbsp &nbsp</p>\r\n            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "309028ec2fb3cb6ca432b385be02300bb6624d66111075", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
#nullable restore
#line 1382 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => applicationService.From);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                BeginWriteTagHelperAttribute();
#nullable restore
#line 1382 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                                                             WriteLiteral(TempData["fromTempValue"]);

#line default
#line hidden
#nullable disable
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.Value = __tagHelperStringValueBuffer;
                __tagHelperExecutionContext.AddTagHelperAttribute("value", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.Value, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_11.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n            <p> &nbsp &nbsp</p>\r\n            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "309028ec2fb3cb6ca432b385be02300bb6624d66114285", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
#nullable restore
#line 1386 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => applicationService.To);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                BeginWriteTagHelperAttribute();
#nullable restore
#line 1386 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                                                           WriteLiteral(TempData["toTempValue"]);

#line default
#line hidden
#nullable disable
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.Value = __tagHelperStringValueBuffer;
                __tagHelperExecutionContext.AddTagHelperAttribute("value", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.Value, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_11.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n            <p> &nbsp &nbsp</p>\r\n\r\n");
#nullable restore
#line 1390 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
             if (Model != null)
            {
                

#line default
#line hidden
#nullable disable
#nullable restore
#line 1392 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                 if (Model.Count() > 0)
                {


#line default
#line hidden
#nullable disable
                WriteLiteral("                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "309028ec2fb3cb6ca432b385be02300bb6624d66118090", async() => {
                    WriteLiteral("\r\n                    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
#nullable restore
#line 1396 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => applicationService.FrequencySizeValue);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 1396 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = applicationService.FrequencySizesList;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
#nullable restore
#line 1398 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1398 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                 


            }
            else
            {

#line default
#line hidden
#nullable disable
                WriteLiteral("                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "309028ec2fb3cb6ca432b385be02300bb6624d66121095", async() => {
                    WriteLiteral("\r\n                ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
#nullable restore
#line 1404 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => applicationService.FrequencySizeValue);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 1404 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = applicationService.FrequencySizesList;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
#nullable restore
#line 1406 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"

            }

#line default
#line hidden
#nullable disable
                WriteLiteral("        </div>\r\n        <div class=\"center_top_menu\" style=\"width: 50%; height:100%\">\r\n\r\n            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("label", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "309028ec2fb3cb6ca432b385be02300bb6624d66123818", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
#nullable restore
#line 1411 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => applicationService.ApplicationTable);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n            <p> &nbsp &nbsp</p>\r\n            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "309028ec2fb3cb6ca432b385be02300bb6624d66125605", async() => {
                    WriteLiteral("\r\n            ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_20);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
#nullable restore
#line 1414 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => applicationService.ApplicationFirstValue);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 1414 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = applicationService.ApplicationFirstList;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
        </div>

        <div class=""center_top_menu"" style=""width: 50%; height:100%"">

            <label id=""search_by"" style=""font-weight: bold; font-family: Roboto; font-size: 13px;  width:150px""></label>
            <p> &nbsp &nbsp</p>
            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "309028ec2fb3cb6ca432b385be02300bb6624d66128307", async() => {
                    WriteLiteral("\r\n            ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_24);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
#nullable restore
#line 1423 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => applicationService.ApplicationSecondValue);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 1423 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = applicationService.ApplicationSecondList;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
        </div>

        <div class=""center_top_menu"" style=""width: 50%; height:100%"">

            <label id=""search_by"" style=""font-weight: bold; font-family: Roboto; font-size: 13px;  width:150px;""></label>
            <p> &nbsp &nbsp</p>
            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "309028ec2fb3cb6ca432b385be02300bb6624d66131012", async() => {
                    WriteLiteral("\r\n            ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_26);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
#nullable restore
#line 1432 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => applicationService.ApplicationThirdValue);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 1432 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = applicationService.ApplicationThirdList;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
        </div>
        <div class=""center_top_menu"" style=""width: 50%; height:100%"">

            <label id=""search_by"" style=""font-weight:bold; font-family:Roboto; font-size:13px;  width:150px;""></label>
            <p>&nbsp &nbsp</p>
            <input type=""checkbox"" id=""selectedLevel"" name=""selectedLevel"">
            <label for=""selectedLevel"" style=""font-weight: bold; font-family: Roboto; font-size: 13px; color: black; padding-top:5px;""> Search only in the selected level</label>
        </div>

        <div class=""center_top_menu"" style=""width: 50%; height:100%"">
            <label id=""search_by"" style=""font-weight: bold; font-family: Roboto; font-size: 13px;  width:150px""></label>
            <p> &nbsp &nbsp</p>
            <label id=""search_by"" style=""font-weight: bold; font-family: Roboto; font-size: 13px; width:80%; height: 35px; text-align: center;"">-or-</label>
        </div>
        <div class=""center_top_menu"" style=""width: 50%; height:100%"">
            <label id=""search_by"" st");
                WriteLiteral(@"yle=""font-weight: bold; font-family: Roboto; font-size: 13px;  width:150px""></label>
            <p> &nbsp &nbsp</p>
            <fieldset id=""group1"">
                <label class=""radio_control"">
                    <input type=""radio"" value=""Hierarchical"" name=""group1"" />
                    Hierarchical
                </label>
                <label class=""radio_control"">
                    <input type=""radio"" value=""Alphabetical"" name=""group1"" />
                    Alphabetical
                </label>
            </fieldset>
            <p> &nbsp &nbsp</p>
            <div id=""abbr""><a href=""#"" onClick=""LinkClick(); return false;"">Abbreviations</a></div>

        </div>
        <div class=""center_top_menu"" style=""width: 50%; height:100%"">
            <label id=""search_by"" style=""font-weight: bold; font-family: Roboto; font-size: 13px;  width:150px""></label>
            <p> &nbsp &nbsp</p>
            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "309028ec2fb3cb6ca432b385be02300bb6624d66135518", async() => {
                    WriteLiteral("\r\n            ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_27);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_28);
#nullable restore
#line 1469 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => applicationService.ApplicationAllValue);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 1469 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = applicationService.ApplicationAllList;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n        </div>\r\n        <div class=\"center_top_menu\" style=\"width: 50%; height:100%\">\r\n            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("label", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "309028ec2fb3cb6ca432b385be02300bb6624d66137970", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
#nullable restore
#line 1473 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => applicationService.FrequencyTable);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n            <p> &nbsp &nbsp</p>\r\n");
#nullable restore
#line 1475 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
             if (Model != null)
            {
                

#line default
#line hidden
#nullable disable
#nullable restore
#line 1477 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                 if (Model.Count() > 0)
                {

#line default
#line hidden
#nullable disable
                WriteLiteral("                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "309028ec2fb3cb6ca432b385be02300bb6624d66140436", async() => {
                    WriteLiteral("\r\n                    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_32);
#nullable restore
#line 1480 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => applicationService.FrequencytableValue);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 1480 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = Model.ElementAt(0).FrequencyTablesList;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
                BeginWriteTagHelperAttribute();
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __tagHelperExecutionContext.AddHtmlAttribute("multiple", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
#nullable restore
#line 1482 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1482 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                 
            }
            else
            {


#line default
#line hidden
#nullable disable
                WriteLiteral("                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "309028ec2fb3cb6ca432b385be02300bb6624d66143764", async() => {
                    WriteLiteral("\r\n                ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_32);
#nullable restore
#line 1488 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => applicationService.FrequencytableValue);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 1488 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = applicationService.FrequencyTablesList;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
                BeginWriteTagHelperAttribute();
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __tagHelperExecutionContext.AddHtmlAttribute("multiple", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
#nullable restore
#line 1490 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
            }

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
        </div>
        <br />
        <br />
        <p> &nbsp &nbsp</p>

        <div class=""center_top_menu"" style=""width: 50%; height:100%"">
            <label id=""search_by"" style=""font-weight: bold; font-family: Roboto; font-size: 13px; width:150px;""></label>

            <button type=""submit"" id=""searh_now"" class=""btn btn-primary"" style=""width: 40%; background-color: darkseagreen;"" onclick=""SearchNow()"">Search</button>
        </div>
        <br />
        <p> &nbsp &nbsp</p>

    </div>
    <br />
    <br />
    <div id=""print_div"" class=""center""");
                BeginWriteAttribute("style", " style=\"", 91301, "\"", 91358, 1);
#nullable restore
#line 1508 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 91309, showDiv ? "display: block;" : "display: none;", 91309, 49, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(@">
        <div class=""center_top_menu center"" style=""width: 40%; height:100%"">
            <button type=""submit"" id=""download_excel"" class=""btn btn-secondary center"" style=""width: 50%; background-color: limegreen; margin: 5px;"">
                <i class=""fas fa-file-excel""></i>Download Excel
            </button>
            <button type=""submit"" id=""download_pdf"" class=""btn btn-secondary center"" style=""width: 50%; background-color: red; margin: 5px;"">
                <i class=""fas fa-file-pdf""></i> Download PDF
            </button>
        </div>
    </div>
    <br />

    <p id=""docsHidden"" style=""visibility:hidden;""></p>
    <div id=""rData"" class=""center"">
");
#nullable restore
#line 1522 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
         if (Model != null)
        {
            

#line default
#line hidden
#nullable disable
#nullable restore
#line 1524 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
             if (Model.Count() > 0)
            {

#line default
#line hidden
#nullable disable
                WriteLiteral(@"                <table class='table table-sm table-striped table-hover border-bottom' style='width:80%; background-color: white;'>
                    <tr><th width=""200px"" style=""text-align:center"">Frequency</th><th>Application</th><th>ITU</th></tr>


");
                WriteLiteral("\r\n");
#nullable restore
#line 1607 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                     foreach (FrekvencijeProject.Models.Ajax.ApplicationView i in Model)
                    {

#line default
#line hidden
#nullable disable
                WriteLiteral("                        <tr>\r\n                            <td>");
#nullable restore
#line 1610 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                           Write(i.LowView);

#line default
#line hidden
#nullable disable
                WriteLiteral("-");
#nullable restore
#line 1610 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                      Write(i.HighView);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n\r\n                            <td>\r\n\r\n");
#nullable restore
#line 1614 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                  
                                    var listOfApps = new List<string>();
                                    var isThereDocs = false;
                                    var isThereStands = false;
                                    var Docs = "";
                                    var Stand = "";
                                    var isThereDocsInf = false;
                                    var isThereStandsInf = false;
                                    var DocsInf = "";
                                    var StandInf = "";
                                

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n");
#nullable restore
#line 1626 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                 foreach (var tempDoc in @i.Application)
                                {

                                    

#line default
#line hidden
#nullable disable
#nullable restore
#line 1629 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                     if (!tempDoc.isDeletedApp)
                                    {

#line default
#line hidden
#nullable disable
                WriteLiteral("                                        <p>\r\n                                            ");
#nullable restore
#line 1632 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                       Write(tempDoc.Application);

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n");
                WriteLiteral("\r\n");
#nullable restore
#line 1645 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                             if (@tempDoc.DocumentsAditional.Count > 0)
                                            {

                                                for (var tt = 0; tt < tempDoc.DocumentsAditional.Count; tt++)
                                                {
                                                    if (tt == tempDoc.DocumentsAditional.Count - 1)
                                                    {
                                                        if (tempDoc.DocumentsAditional[tt].isRegulatory == true)
                                                        {
                                                            Docs += tempDoc.DocumentsAditional[tt].DocumentId;
                                                            isThereDocs = true;
                                                        }
                                                        else if (tempDoc.DocumentsAditional[tt].isRegulatory == false)
                                                        {
                                                            DocsInf += tempDoc.DocumentsAditional[tt].DocumentId;
                                                            isThereDocsInf = true;
                                                        }

                                                    }
                                                    else
                                                    {

                                                        //Docs += tempDoc.DocumentId[tt] + ",";
                                                        if (tempDoc.DocumentsAditional[tt].isRegulatory == true)
                                                        {
                                                            Docs += tempDoc.DocumentsAditional[tt].DocumentId + ",";
                                                            isThereDocs = true;
                                                        }
                                                        else if (tempDoc.DocumentsAditional[tt].isRegulatory == false)
                                                        {
                                                            DocsInf += tempDoc.DocumentsAditional[tt].DocumentId + ",";
                                                            isThereDocsInf = true;
                                                        }

                                                    }
                                                }
                                            }
                                            else
                                            {
                                                isThereDocs = false;
                                                isThereDocsInf = false;
                                            }

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n");
#nullable restore
#line 1688 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                             if (@tempDoc.StandardsAditional.Count > 0)
                                            {

                                                for (var tt = 0; tt < tempDoc.StandardsAditional.Count; tt++)
                                                {
                                                    if (tt == tempDoc.StandardsAditional.Count - 1)
                                                    {
                                                        if (tempDoc.StandardsAditional[tt].isRegulatoryStand == true)
                                                        {
                                                            Stand += tempDoc.StandardsAditional[tt].StandardId;
                                                            isThereStands = true;
                                                        }
                                                        else if (tempDoc.StandardsAditional[tt].isRegulatoryStand == false)
                                                        {
                                                            StandInf += tempDoc.StandardsAditional[tt].StandardId;
                                                            isThereStandsInf = true;

                                                        }

                                                    }
                                                    else
                                                    {
                                                        if (tempDoc.StandardsAditional[tt].isRegulatoryStand == true)
                                                        {
                                                            Stand += tempDoc.StandardsAditional[tt].StandardId + ",";
                                                            isThereStands = true;
                                                        }
                                                        else if (tempDoc.StandardsAditional[tt].isRegulatoryStand == false)
                                                        {

                                                            StandInf += tempDoc.StandardsAditional[tt].StandardId + ",";
                                                            isThereStandsInf = true;

                                                        }

                                                    }
                                                }
                                            }
                                            else
                                            {
                                                isThereStands = false;
                                                isThereStandsInf = false;
                                            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1731 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                             if (isThereDocs && !isThereStands)
                                            {


#line default
#line hidden
#nullable disable
                WriteLiteral("                                                <button style=\"width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"");
                BeginWriteAttribute("onclick", " onclick=\"", 103710, "\"", 103800, 13);
                WriteAttributeValue("", 103720, "ShowAllValues(\'", 103720, 15, true);
#nullable restore
#line 1734 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 103735, Docs, 103735, 5, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 103740, "\'", 103740, 1, true);
                WriteAttributeValue(" ", 103741, ",\'", 103742, 3, true);
#nullable restore
#line 1734 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 103744, Stand, 103744, 6, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 103750, "\'", 103750, 1, true);
                WriteAttributeValue(" ", 103751, ",\'", 103752, 3, true);
#nullable restore
#line 1734 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 103754, isThereDocs, 103754, 12, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 103766, "\',\'", 103766, 3, true);
#nullable restore
#line 1734 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 103769, isThereStands, 103769, 14, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 103783, "\');", 103783, 3, true);
                WriteAttributeValue(" ", 103786, "return", 103787, 7, true);
                WriteAttributeValue(" ", 103793, "false;", 103794, 7, true);
                EndWriteAttribute();
                WriteLiteral(">Regulatory docs</button>\r\n");
#nullable restore
#line 1735 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                            }
                                            else if (!isThereDocs && isThereStands)
                                            {


#line default
#line hidden
#nullable disable
                WriteLiteral("                                                <button style=\"width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"");
                BeginWriteAttribute("onclick", " onclick=\"", 104148, "\"", 104237, 12);
                WriteAttributeValue("", 104158, "ShowAllValues(\'", 104158, 15, true);
#nullable restore
#line 1739 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 104173, Docs, 104173, 5, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 104178, "\',", 104178, 2, true);
                WriteAttributeValue(" ", 104180, "\'", 104181, 2, true);
#nullable restore
#line 1739 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 104182, Stand, 104182, 6, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 104188, "\',\'", 104188, 3, true);
#nullable restore
#line 1739 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 104191, isThereDocs, 104191, 12, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 104203, "\',\'", 104203, 3, true);
#nullable restore
#line 1739 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 104206, isThereStands, 104206, 14, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 104220, "\');", 104220, 3, true);
                WriteAttributeValue(" ", 104223, "return", 104224, 7, true);
                WriteAttributeValue(" ", 104230, "false;", 104231, 7, true);
                EndWriteAttribute();
                WriteLiteral(">Regulatory docs</button>\r\n");
#nullable restore
#line 1740 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                            }
                                            else if (isThereDocs && isThereStands)
                                            {

#line default
#line hidden
#nullable disable
                WriteLiteral("                                                <button style=\"width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"");
                BeginWriteAttribute("onclick", " onclick=\"", 104582, "\"", 104671, 12);
                WriteAttributeValue("", 104592, "ShowAllValues(\'", 104592, 15, true);
#nullable restore
#line 1743 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 104607, Docs, 104607, 5, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 104612, "\',", 104612, 2, true);
                WriteAttributeValue(" ", 104614, "\'", 104615, 2, true);
#nullable restore
#line 1743 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 104616, Stand, 104616, 6, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 104622, "\',\'", 104622, 3, true);
#nullable restore
#line 1743 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 104625, isThereDocs, 104625, 12, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 104637, "\',\'", 104637, 3, true);
#nullable restore
#line 1743 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 104640, isThereStands, 104640, 14, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 104654, "\');", 104654, 3, true);
                WriteAttributeValue(" ", 104657, "return", 104658, 7, true);
                WriteAttributeValue(" ", 104664, "false;", 104665, 7, true);
                EndWriteAttribute();
                WriteLiteral(">Regulatory docs</button>\r\n");
#nullable restore
#line 1744 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                            }

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n\r\n");
#nullable restore
#line 1747 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                             if (@tempDoc.Comment != "")
                                            {

#line default
#line hidden
#nullable disable
                WriteLiteral("                                                <button style=\"width: 100px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"");
                BeginWriteAttribute("onClick", " onClick=\"", 105010, "\"", 105069, 5);
                WriteAttributeValue("", 105020, "NotesClick(\'", 105020, 12, true);
#nullable restore
#line 1749 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("  ", 105032, tempDoc.Comment, 105034, 16, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("  ", 105050, "\');", 105052, 5, true);
                WriteAttributeValue(" ", 105055, "return", 105056, 7, true);
                WriteAttributeValue(" ", 105062, "false;", 105063, 7, true);
                EndWriteAttribute();
                WriteLiteral(">Notes</button>\r\n");
#nullable restore
#line 1750 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1751 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                             if (isThereDocsInf && !isThereStandsInf)
                                            {


#line default
#line hidden
#nullable disable
                WriteLiteral("                                                <button style=\"width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"");
                BeginWriteAttribute("onclick", " onclick=\"", 105409, "\"", 105514, 13);
                WriteAttributeValue("", 105419, "ShowAllValuesInf(\'", 105419, 18, true);
#nullable restore
#line 1754 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 105437, DocsInf, 105437, 8, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 105445, "\'", 105445, 1, true);
                WriteAttributeValue(" ", 105446, ",\'", 105447, 3, true);
#nullable restore
#line 1754 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 105449, StandInf, 105449, 9, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 105458, "\'", 105458, 1, true);
                WriteAttributeValue(" ", 105459, ",\'", 105460, 3, true);
#nullable restore
#line 1754 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 105462, isThereDocsInf, 105462, 15, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 105477, "\',\'", 105477, 3, true);
#nullable restore
#line 1754 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 105480, isThereStandsInf, 105480, 17, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 105497, "\');", 105497, 3, true);
                WriteAttributeValue(" ", 105500, "return", 105501, 7, true);
                WriteAttributeValue(" ", 105507, "false;", 105508, 7, true);
                EndWriteAttribute();
                WriteLiteral(">Informative docs</button>\r\n");
#nullable restore
#line 1755 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                            }
                                            else if (!isThereDocsInf && isThereStandsInf)
                                            {


#line default
#line hidden
#nullable disable
                WriteLiteral("                                                <button style=\"width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"");
                BeginWriteAttribute("onclick", " onclick=\"", 105869, "\"", 105973, 12);
                WriteAttributeValue("", 105879, "ShowAllValuesInf(\'", 105879, 18, true);
#nullable restore
#line 1759 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 105897, DocsInf, 105897, 8, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 105905, "\',", 105905, 2, true);
                WriteAttributeValue(" ", 105907, "\'", 105908, 2, true);
#nullable restore
#line 1759 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 105909, StandInf, 105909, 9, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 105918, "\',\'", 105918, 3, true);
#nullable restore
#line 1759 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 105921, isThereDocsInf, 105921, 15, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 105936, "\',\'", 105936, 3, true);
#nullable restore
#line 1759 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 105939, isThereStandsInf, 105939, 17, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 105956, "\');", 105956, 3, true);
                WriteAttributeValue(" ", 105959, "return", 105960, 7, true);
                WriteAttributeValue(" ", 105966, "false;", 105967, 7, true);
                EndWriteAttribute();
                WriteLiteral(">Informative docs</button>\r\n");
#nullable restore
#line 1760 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                            }
                                            else if (isThereDocsInf && isThereStandsInf)
                                            {


#line default
#line hidden
#nullable disable
                WriteLiteral("                                                <button style=\"width: 150px; background-color: #008CBA; margin-top:5px; margin-bottom:5px;\"");
                BeginWriteAttribute("onclick", " onclick=\"", 106327, "\"", 106431, 12);
                WriteAttributeValue("", 106337, "ShowAllValuesInf(\'", 106337, 18, true);
#nullable restore
#line 1764 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 106355, DocsInf, 106355, 8, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 106363, "\',", 106363, 2, true);
                WriteAttributeValue(" ", 106365, "\'", 106366, 2, true);
#nullable restore
#line 1764 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 106367, StandInf, 106367, 9, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 106376, "\',\'", 106376, 3, true);
#nullable restore
#line 1764 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 106379, isThereDocsInf, 106379, 15, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 106394, "\',\'", 106394, 3, true);
#nullable restore
#line 1764 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
WriteAttributeValue("", 106397, isThereStandsInf, 106397, 17, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 106414, "\');", 106414, 3, true);
                WriteAttributeValue(" ", 106417, "return", 106418, 7, true);
                WriteAttributeValue(" ", 106424, "false;", 106425, 7, true);
                EndWriteAttribute();
                WriteLiteral(">Informative docs</button>\r\n");
#nullable restore
#line 1765 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1766 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                              
                                                Docs = "";
                                                Stand = "";
                                                DocsInf = "";
                                                StandInf = "";
                                                isThereDocsInf = false;
                                                isThereStandsInf = false;
                                                isThereDocs = false;
                                                isThereStands = false;
                                            

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n                                            <br />\r\n                                        </p>\r\n");
#nullable restore
#line 1779 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1779 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                                     
                                }

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n");
                WriteLiteral("\r\n");
                WriteLiteral("\r\n                            </td>\r\n\r\n");
                WriteLiteral("                            <td>");
#nullable restore
#line 1822 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                           Write(i.regionCode);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                        </tr>\r\n");
#nullable restore
#line 1824 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
                    }

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n\r\n                </table>\r\n");
#nullable restore
#line 1828 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"

            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1829 "C:\Users\Dušan\Desktop\FREELANCE\FrekvencijaProjekat\frekvencija_project\FrekvencijeProject\Views\ApplicationSearch\Index.cshtml"
             
        }

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n    </div>\r\n    <div>\r\n        <h4 id=\"error_input\" style=\"color: red; text-align: center; font-weight: bold; font-family: Roboto; font-size: 33px; \"></h4>\r\n    </div>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public FrekvencijeProject.Controllers.ApplicationSearchController applicationService { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<FrekvencijeProject.Models.Ajax.ApplicationView>> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
